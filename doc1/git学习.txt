简介：
历史：
	1，使用版本控制可以知道文件修改的历史，甚至可以回到某个过去时间点的文件内容。
	2，本地版本控制：rcs。只是不断的打补丁记录版本修改信息。容易工作目录混淆，记录信息丢失无法恢复。
	3，集中化版本控制：cvs。版本的完整信息保存在中央，如果中央出现问题，影响提交和恢复代码
	4，分布式版本控制：git。本地完整镜像中央版本信息。

git特性
git关心版本整体是否发生变化
因为git的本地保存了完整的版本信息，所以，很多操作基本都是本地化操作，而不是每次都要联网。提高效率和速度
	如：操作日志
			比较现在版本和老版本差异。
任何修改git都能发现，从而保持数据的完整性
			
git安装
在 Windows 上安装
在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，
可以到 Google Code 的页面上下载 exe 安装文件并运行：
http://code.google.com/p/msysgit
完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，
另外还有一个图形界面的 Git 项目管理工具。
			
git配置
git config命令来设置git参数。git的设置放在三个地方。
	1，安装路径下的/etc/ gitconfig文件。对应命令是git config --system
	2，总的.gitconfig文件。这个是仓库所在的根目录下。对应命令git config --global
	3，项目下的.git/config文件。

设置用户和邮箱
git config --global user.name ""
git config --global user.email ""

查看设置信息：git config --list


生成key
	1，在空白处点击右键，选择git base。打开命令窗口
	2，使用命令：ssh-keygen -t rsa -C "你的邮箱"			我的是 ssh-keygen -t rsa -C "hu.kui@bestv.com.cn"
	3，这里要填的东西，默认不填写。一路回车
	4，系统显示生成成功。在指定的路径下找到公约，然后txt打开，把内容复制。在gitlab的自己的设置里面，添加公约，然后把内容贴进去。
	5，测试连接：ssh -T git@"你的gitlab服务器地址"			我的是 ssh -T git@"gitlab.ott.bestv.com.cn"

第一章：建立远程仓库和本地master


一开始是，选择一个本地路径，使用git init初始化后，这个路径就是git的master的路径了。
目前只有一个分支就是master（本地叫master远程叫origin/master）。
然后，使用了git pull orgin master命令后，将远程的orgin的代码拉到本地，并且代码对应的分支是master。

使用myeclipse的导入工程时，需要添加一个.project的工程描述文件。

问题一，本地有修改，但是不希望提交的情况下，拉去其他版本的代码。
	使用忽略文件.gitignore

问题二，怎样在本地建立分支后管理远程的另一个分支。
	git checkout --track 远程分支
	


第二章：主要操作				
文件有几个状态：
	已跟踪/未跟踪			就是说这个文件是否在远程仓库存在。
	修改/未修改		modified		本地文件和远程仓库文件对比，是否发生变化			
	已暂存/未暂存	staged		修改过的文件，是否纳入暂存区，等待提交。

git clone [url] [filepath]	将远程仓库的文件拉取到本地，默认使用当前路径，可以指定路径。
这里的url注意了，是ssh地址，不是浏览器上面的地址，你找到这个工程，在工程中间位置有ssh和https这样的地址信息，



刚拉取下来的文件，都是处于跟踪且未修改状态。
可以使用命令：git status 查看所有文件状态。会分为暂存区和未暂存区两大部分。

case1:这个时候修改一个跟踪的文件后，状态变为跟踪，未修改。如果要提交这个文件：
	git add [file] 就会将这个状态的文件放入暂存区。
	git commit	就会将暂存区的文件都提交服务器。

case2:这个时候，如果本地要建一个文件，这个文件未出现在远程仓库。
			则其状态是，未跟踪未暂存。可以加入暂存，再提交。
			git add [file] 将文件加入跟踪且放入暂存区
			git commit 将暂存区文件提交。

case3:如果一个文件，放入暂存区后又有修改。则这个时候查看状态，会发现
			它即出现在暂存区又出现在未暂存区。
			这个是因为，暂存区放置的是上次修改后放入的部分。未暂存区是第二次修改的部分。
			
			如果这个是使用git commit则会提交暂存修改的部分。
			如果要把第二次修改一同提交，则要再次使用git add，再git commit
			
在提交前可以查看，文件的变化：
	git diff		查看的是未暂存的文件修改了哪些，在提交代码时，有时候我们不知道这个文件修改了哪些，可以使用这个命令查看本地文件和服务器文件有什么区别
		git diff 文件名称(全路径)
	git dif --cache 	查看的是暂存的文件修改了哪些

提交文件：git commit	不加参数，提交的是暂存区的所有文件到本地仓库。
	git commit -a	把所有有跟踪状态的，发生变化的，不管是否在暂存区，都提交。
	git commit -amend		取消前面的一次提交动作
	
删除文件：git rm 文件
	git rm 文件		删除服务端和本地的这个文件，
	git rm -cached 文件		删除服务端这个文件，不再跟踪，本地有还保留。

移动文件：git mv 文件 路径

忽略文件：
在文件目录下，建一个.gitignore文件。
	立即记录忽略的文件或者文件夹。
	
远程仓库
这里涉及名词：远程仓库，branch，tag，本地仓库，工作区，暂存区
git版本库，就是工作区的.git文件夹。里面有stage(或index)的暂存区

	git remote 显示远程仓库名
	git remote -v  显示远程仓库名和其地址
	git remote add shortname url	添加一个远程仓库并命名
	git remote show remote-name	显示远程仓库的所有详情
		如：仓库地址。master，branch信息，还有本地branc和远程分支的对应关系
	git remote rename 原名 新名	修改远程仓库的名称
	git remote rm			删除远程仓库
		
	git fetch 仓库名 从远程仓库抓取所有本地没有的数据。从远程仓库跟新数据到本地。
	这个命令运行完成后，可以在本地访问仓库中的所有分支(branch)
	
	git pull  是将远程分支，数据抓取，并合并到本地分支。
	git clone 是这个命令的特殊化，专门抓master
				
	git push [remote] [branch] 将本地仓库数据推送到远程仓库。
				这个命令有条件，1是有权限，2你远程仓库别人没有更新。
				
	git tag 远程所有tag			
	 			git tag -l 'v.*'				按关键字过滤
	 
第三章：分支：
git branch						查询当前分支
git branch -a 				查询本地和远程所有分支
git branch 名称				新增本地分支
git branch -d 名称 		删除本地分支				有未合并信息会提示。
					 -D					强制删除本地分支
git branch -vv	      查看本地分支与远程分支对应关系
git branch --set-upstream 本地分支 远程分支			将本地分支和远程分支关联

这个关联关系在配置文件中也有所有使用查看配置文件也能看到
git config --list

git checkout 名称			切换分支
git checkout -b 名称	创建+切换分支
git checkout -b 本地分支名称 origin/远程分支名称	创建+切换分支+关联
git checkout --track 远程分支	将当前本地分组和远程分支关联


git merge 名称				合并某分支到当前分支

git pull 远程代码库	分支	从远程分支拉取代码	 			


第四章：日志
git log相关
	git log 查看日志。按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。
	
	git log [option]
		option:	
				--grep 		按照关键词过滤
				--author	按作者过滤
				--committer	按提交者过滤
				--since		2.days 两天之内提交的。
				--after		2008-10-01 指定日期之后提交的
				--before	2008-10-01 指定日期之前提交的

	Git log –n 1 –stat             查看最后一次提交的文件列表

	Git log –n 1 –p		 查看最后一次提交的文件细节


第五章：tag

	tag是在某个版本的代码上打的一个新的代码集合。
	1, 在master上，使用命令 git checkout -b 本地分支名称 服务器tag名称
	2，上面的命令就是拉取并切换到了分支上，注意：这里要检查下拉取的版本有可能还是会出现本地的代码和远程代码不同的情况。使用git log对比本地的每个提交信息和远程的提交信息。
		如果不同，则使用命令：git reset --hard 远程版本上最新的md5码 
		为什么有不同，我猜测是这样的：我首先在master上同步了最新，然后使用checkout -b 命令并切换到分支上的，我发现拉取的分支只能拉到，这个远程分支和master相同的提交部分代码。不同的正好就不往下取代码了。


	4, 开发完成提交后，使用git tag 命令：git tag -a tag名称 -m 提交说明; [注意：这个tag名称不要和你的工作区的branch名称相同，否则不知道推送哪个，因为下面的push命令，tag和branch是相似的。错误信息：error: src refspec XXX matches more than one]
	5，然后，可以使用git tag查看所有的tag列表
	6，提交tag：git push origin tag名称。验证：在网站上有分支或tag列表，上面工具栏有compare，输入两个分支名称后，会列出大家不同地方，确认这些不同就是你要提交的即可。
	7, 删除tag: git tag -d tag名称。	-- 这个是删除本地tag信息
	            git push origin :refs/tags/tag名称   -- 把这个tag的删除同步到远端
	8，分支合并master：在本地的分支提交tag或分支后，切换到master上，使用git pull同步下master。然后，使用命令 git merge --no-ff 分支或tag
	9, 将出现有冲突的文件列表。需要手动合并。然后，在master上add，commit，push。



	放弃修改：
		1,git reset --hard		这个命令是回到某个之前的已提交过的版本
		问题2：
                       放弃对某个文件的修改：git checkout -- 文件名称。比如我们的struts文件和log4j文件
			git checkout .
			这个命令可以把已跟踪状态的，有修改的文件全部回退到服务器一致的状态。
		
	删除文件：
		git clean -df。	这个命令会删掉，那些为加入跟踪状态的本地文件。
		


	查看本地文件：git ls-files
	

	暂存某些未提交文件：
		git stash 【文件】

		回来后，可以使用git stash list查看暂存列表。
	
第六章：提示和错误信息分析
我们出现了push不上去。一般说有文件不同需要merge。建议pull。
pull的时候又报error：your local changes to the following files

这个时候，使用stash查看你提交到远程的信息。
然后，git pull 。就会把远程和本地有冲突的文件列出来。
你根据前面提示的某个文件冲突，使用git diff去处理。
	1，把远程来下来
	
	2，把本地覆盖远程
	

http://blog.chinaunix.net/uid-10415985-id-4142896.html

放弃修改。

stash 是把修改的部分，暂存。去做其他的工作。
stash pop，从暂存区还原。
http://blog.csdn.net/wh_19910525/article/details/7784901


---git lab 操作分支合并---------

	不管是tag和是branch，都是开发完成后推到服务器一个新的tag或者branch，然后，提交合并。这样是最保险。当然，如果是少量的改动而且离最新的更新不长，可以直接在branch上更新。
	如果是走网站合并冲突请求流程的，见下面流程。

	1，在网站上，merge requests这里，进入点击new merge request.
	2, 选择source分支是待合并的分支，target是合并到的，一般是master。点击提交后，会显示这两个分支不同地方，有各自的提交信息和冲突文件。
	3，有个assign ，选择谁来执行这次的合并。然后保存。

	接下来出现两种情况。一种是没有冲突文件，这种简单，在网站上看看修改的地方，然后 有个地方是问你，合并后是否删除source分支，点击删除。然后点击确认即可。

	第二种情况是出现了冲突，需要手动合并的。网站上会类似这样的文字。

	4，出现冲突的话，操作步骤如下：
			（我在OSS_2.9.5_20151117_VERSION上做了修改，然后提交origin一个branch，然后在网上把OSS_2.9.5_20151117_VERSION merge到 master上，网上提示有冲突，执行下面步骤）
	5，git checkout master
	   git pull
           git checkout -b OSS_2.9.5_20151117_VERSION origin/OSS_2.9.5_20151117_VERSION
	   git checkout master
           git merge --no-ff OSS_2.9.5_20151117_VERSION
           

	   经过上面的步骤，就是在本地把两个分支拉下来并且提交merge请求，这个时候，你分支状态是master|MERGING。并且会列出冲突的文件。
		Auto-merging webapps/oss/WEB-INF/conf/spring/lookup-define.xml
 		CONFLICT (content): Merge conflict in webapps/oss/WEB-INF/conf/spring/lookup-def
		ine.xml
		Auto-merging webapps/oss/WEB-INF/conf/epg-db-config.properties
		CONFLICT (content): Merge conflict in webapps/oss/WEB-INF/conf/epg-db-config.pro
		perties
		Automatic merge failed; fix conflicts and then commit the result.

	  如果没有上面提示的，可以再git pull下。

	6，你要根据这个列把文件逐个拿出来使用工具对比差异，然后，修改后。
	    可以查看下状态
            git status
		绿色部分的文件是这次要合并的且已经修改，不需要手动merge的。
                红色部分是你刚修改的文件。

	    git add 红色文件
            git commit

            这里要提交服务器时，发生问题，百度下，问题是我们这次的合并的分支比master低导致的，解决
	    git pull
            git push

	7，通过上面步骤就提交合并，你在git lab网站上会发现，merge request这里的你的合并请求状态自动完成了

	
取消已跟踪文件
	git update-index --assume-unchanged your_file_path
	
再次跟踪
	git update-index --no-assume-unchanged your_file_path	

Git stash		将加入跟踪状态，但是不提交的文件，这些文件有冲突，我不提交远程

Git stash pop 	把暂存的文件拿回来。



本地分支和远程分支是关联的，但是名称取的不同。
	1,不能使用git push来推送。
	
	2, 但是可以使用 git push origin 本地分支:远程分支。来push上去。
	
	3，或者麻烦点的就是：本地代码变动后，先push远程一个和本地同名分支，然后在服务器上做merge请求。
	
我们现在的版本控制是这样的：

	master是上现网的稳定版本。 如果现网有问题，要紧急修复的，在这里修改提交，然后再同步dev
	
	dev是开发版本，这里是新功能开发，然后送测，bug修复，送测循环。知道测试通过了，要上线时再merge到master上。					
	
	
	现网bug修复时，建议是获取对应的tag（git checkout -b oss_2.9.5_20151016 OSS_2.9.5_20151016_VERSION）
	然后，master和这个tag同时修改